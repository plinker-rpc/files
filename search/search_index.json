{
    "docs": [
        {
            "location": "/", 
            "text": "Files\n\n\nA files component which allows you to read and write files.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/files\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function, with optional array\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nList\n\n\nList files and folders.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndir\n\n\nstring\n\n\nBase paste to list files and folders from\n\n\n./\n\n\n\n\n\n\nextended\n\n\nbool\n\n\nReturn extended fileinfo\n\n\nfalse\n\n\n\n\n\n\ndepth\n\n\nint\n\n\nIterator depth\n\n\n10\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\nlist(\n./\n, false, 10);\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [/] =\n Array\n        (\n            [0] =\n Array\n                (\n                    [name] =\n server.php\n                    [type] =\n file\n                    [size] =\n 706\n                )\n\n            [1] =\n Array\n                (\n                    [name] =\n .plinker\n                    [type] =\n folder\n                    [size] =\n 4096\n                )\n\n            [3] =\n Array\n                (\n                    [name] =\n user_classes\n                    [type] =\n folder\n                    [size] =\n 4096\n                )\n\n            [5] =\n Array\n                (\n                    [name] =\n demo.php\n                    [type] =\n file\n                    [size] =\n 1628\n                )\n\n        )\n\n    [/.plinker] =\n Array\n        (\n            [2] =\n Array\n                (\n                    [name] =\n crontab.journal\n                    [type] =\n file\n                    [size] =\n 45\n                )\n\n        )\n\n    [/user_classes] =\n Array\n        (\n            [4] =\n Array\n                (\n                    [name] =\n demo.php\n                    [type] =\n file\n                    [size] =\n 345\n                )\n\n        )\n\n)\n\n\n\n\n\nResponse (with extended true)\n\n\nArray\n(\n    [/] =\n Array\n        (\n            [0] =\n Array\n                (\n                    [name] =\n server.php\n                    [type] =\n file\n                    [size] =\n 706\n                    [info] =\n Array\n                        (\n                            [last_access] =\n 1525369379\n                            [change_time] =\n 1525368118\n                            [modified_time] =\n 1517173011\n                            [basename] =\n server.php\n                            [extension] =\n php\n                            [filename] =\n server.php\n                            [group] =\n 33\n                            [owner] =\n 33\n                            [inode] =\n 3894233\n                            [path] =\n .\n                            [pathname] =\n ./server.php\n                            [size] =\n 706\n                            [type] =\n file\n                            [isDir] =\n \n                            [isExecutable] =\n \n                            [isFile] =\n 1\n                            [isLink] =\n \n                            [readable] =\n 1\n                            [writable] =\n 1\n                        )\n\n                )\n    // snip..\n\n\n\n\n\nCreate File\n\n\nCreate a file.\n\n\nCall\n\n\n$result = $client-\nfiles-\ncreateFile(\n./path/to/file.txt\n, \nthe file contents\n);\n\n\n\n\n\n\nResponse\n\n\nnumber of bytes written to file\n\n\n\n\n\nGet File\n\n\nGet a file.\n\n\nCall\n\n\n$result = $client-\nfiles-\ngetFile(\n./path/to/file.txt\n);\n\n\n\n\n\n\nResponse\n\n\nthe file contents\n\n\n\n\n\nDelete File\n\n\nDelete a file.\n\n\nCall\n\n\n$result = $client-\nfiles-\ndeleteFile(\n./path/to/file.txt\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Files"
        }, 
        {
            "location": "/#files", 
            "text": "A files component which allows you to read and write files.", 
            "title": "Files"
        }, 
        {
            "location": "/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/files", 
            "title": "Install"
        }, 
        {
            "location": "/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function, with optional array  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/#list", 
            "text": "List files and folders.     Parameter  Type  Description  Default      dir  string  Base paste to list files and folders from  ./    extended  bool  Return extended fileinfo  false    depth  int  Iterator depth  10     Call  $result = $client- files- list( ./ , false, 10);   Response  Array\n(\n    [/] =  Array\n        (\n            [0] =  Array\n                (\n                    [name] =  server.php\n                    [type] =  file\n                    [size] =  706\n                )\n\n            [1] =  Array\n                (\n                    [name] =  .plinker\n                    [type] =  folder\n                    [size] =  4096\n                )\n\n            [3] =  Array\n                (\n                    [name] =  user_classes\n                    [type] =  folder\n                    [size] =  4096\n                )\n\n            [5] =  Array\n                (\n                    [name] =  demo.php\n                    [type] =  file\n                    [size] =  1628\n                )\n\n        )\n\n    [/.plinker] =  Array\n        (\n            [2] =  Array\n                (\n                    [name] =  crontab.journal\n                    [type] =  file\n                    [size] =  45\n                )\n\n        )\n\n    [/user_classes] =  Array\n        (\n            [4] =  Array\n                (\n                    [name] =  demo.php\n                    [type] =  file\n                    [size] =  345\n                )\n\n        )\n\n)  Response (with extended true)  Array\n(\n    [/] =  Array\n        (\n            [0] =  Array\n                (\n                    [name] =  server.php\n                    [type] =  file\n                    [size] =  706\n                    [info] =  Array\n                        (\n                            [last_access] =  1525369379\n                            [change_time] =  1525368118\n                            [modified_time] =  1517173011\n                            [basename] =  server.php\n                            [extension] =  php\n                            [filename] =  server.php\n                            [group] =  33\n                            [owner] =  33\n                            [inode] =  3894233\n                            [path] =  .\n                            [pathname] =  ./server.php\n                            [size] =  706\n                            [type] =  file\n                            [isDir] =  \n                            [isExecutable] =  \n                            [isFile] =  1\n                            [isLink] =  \n                            [readable] =  1\n                            [writable] =  1\n                        )\n\n                )\n    // snip..", 
            "title": "List"
        }, 
        {
            "location": "/#create-file", 
            "text": "Create a file.  Call  $result = $client- files- createFile( ./path/to/file.txt ,  the file contents );   Response  number of bytes written to file", 
            "title": "Create File"
        }, 
        {
            "location": "/#get-file", 
            "text": "Get a file.  Call  $result = $client- files- getFile( ./path/to/file.txt );   Response  the file contents", 
            "title": "Get File"
        }, 
        {
            "location": "/#delete-file", 
            "text": "Delete a file.  Call  $result = $client- files- deleteFile( ./path/to/file.txt );   Response", 
            "title": "Delete File"
        }, 
        {
            "location": "/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }
    ]
}